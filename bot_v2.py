"""
Professional Telegram Bot for Tie Shop - Version 2
With card-based catalog navigation and full localization
"""

import os
import re
import logging
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from dotenv import load_dotenv
from bot_translations import get_text
from database import (
    get_or_create_user, update_user_language, get_user_language, 
    Session, Order, User, Tie,
    migrate_ties_from_json, get_all_active_ties, get_tie_by_id,
    create_tie, update_tie, delete_tie, update_order_status, get_order_by_id,
    create_order, get_user_orders
)

# Load environment variables
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
# Get admin IDs from environment variable (comma-separated)
ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]
# Fallback to single ADMIN_ID for compatibility
if not ADMIN_IDS:
    admin_id = os.getenv('ADMIN_ID')
    if admin_id:
        ADMIN_IDS = [int(admin_id)]
PAYMENT_LINK = os.getenv('PAYMENT_LINK', 'https://kaspi.kz/pay')

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
LANGUAGE_SELECTION = 0
MAIN_MENU = 1
CATALOG_BROWSING = 2
TIE_SELECTED = 3
CONFIRM_PURCHASE = 4
NAME = 5
SURNAME = 6
PHONE = 7
ADDRESS = 8
CHECKOUT = 9
PAYMENT = 10

# Import translations from separate file (already imported above)

class TieShopBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        # Migrate data from JSON to database on startup
        migrate_ties_from_json()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup all bot handlers"""
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                LANGUAGE_SELECTION: [CallbackQueryHandler(self.language_selected, pattern='^lang_')],
                MAIN_MENU: [
                    CallbackQueryHandler(self.show_catalog, pattern='^catalog$'),
                    CallbackQueryHandler(self.show_orders, pattern='^my_orders$'),
                    CallbackQueryHandler(self.show_support, pattern='^support$'),
                    CallbackQueryHandler(self.show_contacts, pattern='^contact$'),
                ],
                CATALOG_BROWSING: [
                    CallbackQueryHandler(self.select_tie_by_number, pattern='^tie_\d+$'),
                    CallbackQueryHandler(self.back_to_menu, pattern='^back_menu$'),
                ],
                TIE_SELECTED: [
                    CallbackQueryHandler(self.confirm_purchase, pattern='^confirm_yes$'),
                    CallbackQueryHandler(self.confirm_purchase, pattern='^confirm_no$'),
                ],
                NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message_input),
                    MessageHandler(filters.PHOTO, self.handle_catalog_photo)
                ],
                SURNAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message_input),
                    MessageHandler(filters.PHOTO, self.handle_catalog_photo)
                ],
                PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message_input),
                    MessageHandler(filters.PHOTO, self.handle_catalog_photo)
                ],
                ADDRESS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message_input),
                    MessageHandler(filters.PHOTO, self.handle_catalog_photo)
                ],
                CHECKOUT: [
                    CallbackQueryHandler(self.process_payment, pattern='^pay_order$'),
                    CallbackQueryHandler(self.cancel_order, pattern='^cancel_order$'),
                ],
                PAYMENT: [
                    CallbackQueryHandler(self.payment_done, pattern='^payment_done$'),
                ],
            },
            fallbacks=[],
        )
        
        # Cancel command handler (highest priority - must be first)
        self.application.add_handler(CommandHandler('cancel', self.handle_cancel_command))
        
        self.application.add_handler(conv_handler)
        
        # Admin handlers
        self.application.add_handler(CallbackQueryHandler(self.admin_approve, pattern='^approve_'))
        self.application.add_handler(CallbackQueryHandler(self.admin_reject, pattern='^reject_'))
        self.application.add_handler(CallbackQueryHandler(self.admin_set_delivery, pattern='^setdelivery_'))
        self.application.add_handler(CallbackQueryHandler(self.admin_mark_delivered, pattern='^delivered_'))
        self.application.add_handler(CallbackQueryHandler(self.user_confirm_receipt, pattern='^received_'))
        # admin_input_days is handled in specific conversation states
        self.application.add_handler(CommandHandler('boss', self.boss_panel))
        self.application.add_handler(CommandHandler('debug', self.debug_logs))
        self.application.add_handler(CommandHandler('logs', self.show_logs))
        self.application.add_handler(CommandHandler('db', self.check_database))
        self.application.add_handler(CommandHandler('test_update', self.test_update))
        self.application.add_handler(CommandHandler('migrate', self.force_migrate))
        self.application.add_handler(CommandHandler('catalog', self.show_catalog_command))
        self.application.add_handler(CommandHandler('sync', self.sync_json_db))
        self.application.add_handler(CommandHandler('admin_test', self.admin_test))
        self.application.add_handler(CommandHandler('edit_test', self.edit_test))
        self.application.add_handler(CommandHandler('test_edit', self.test_edit))
        self.application.add_handler(CommandHandler('test_conflict', self.test_conflict))
        self.application.add_handler(CommandHandler('force_edit', self.force_edit))
        self.application.add_handler(CommandHandler('clear_all', self.clear_all_data))
        self.application.add_handler(CommandHandler('reset_ties', self.reset_ties))
        self.application.add_handler(CallbackQueryHandler(self.boss_show_orders, pattern='^boss_orders$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_monitor, pattern='^boss_monitor$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_report, pattern='^boss_report$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_catalog_menu, pattern='^boss_catalog$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_add_tie, pattern='^add_tie$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_edit_tie, pattern='^edit_tie_\d+$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_delete_tie, pattern='^delete_tie_\d+$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_list_ties, pattern='^list_ties$'))
        self.application.add_handler(CallbackQueryHandler(self.handle_edit_field, pattern='^edit_field_'))
        self.application.add_handler(CallbackQueryHandler(self.cancel_edit, pattern='^cancel_edit$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_broadcast_menu, pattern='^boss_broadcast$'))
        self.application.add_handler(CallbackQueryHandler(self.broadcast_all, pattern='^broadcast_all$'))
        self.application.add_handler(CallbackQueryHandler(self.broadcast_one, pattern='^broadcast_one$'))
        self.application.add_handler(CallbackQueryHandler(self.select_user, pattern='^select_user_'))
        self.application.add_handler(CallbackQueryHandler(self.cancel_broadcast, pattern='^cancel_broadcast$'))
        self.application.add_handler(CallbackQueryHandler(self.boss_back, pattern='^boss_back$'))
        
        # IMPORTANT: Add message handlers for catalog input (must be last)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_catalog_input))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_catalog_photo))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Start command handler"""
        logger.info(f"START command from user {update.effective_user.id} (@{update.effective_user.username})")
        user = update.effective_user
        get_or_create_user(user.id, user.username)
        
        # Set Russian as default language
        context.user_data['language'] = 'ru'
        update_user_language(user.id, 'ru')
        
        # Go directly to main menu
        return await self.show_main_menu(update, context)
    
    async def language_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle language selection"""
        query = update.callback_query
        logger.info(f"LANGUAGE_SELECTED callback from user {update.effective_user.id}: {query.data}")
        await query.answer()
        
        lang = query.data.replace('lang_', '')
        user_id = update.effective_user.id
        
        update_user_language(user_id, lang)
        context.user_data['language'] = lang
        
        await query.edit_message_text(get_text(lang, 'welcome'))
        
        return await self.show_main_menu(update, context)
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show main menu"""
        logger.info(f"SHOW_MAIN_MENU for user {update.effective_user.id}")
        lang = 'ru'  # Force Russian
        context.user_data['language'] = 'ru'
        
        keyboard = [
            [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog')],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contact')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if update.callback_query:
            await update.callback_query.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
        
        return MAIN_MENU
    
    async def show_catalog(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show all ties with full info and select buttons"""
        query = update.callback_query
        logger.info(f"SHOW_CATALOG callback from user {update.effective_user.id}")
        await query.answer()
        
        lang = 'ru'  # Force Russian
        
        # Get ties from database
        ties = get_all_active_ties()
        logger.info(f"Retrieved {len(ties)} ties from database")
        
        if not ties:
            logger.warning("No ties found in database")
            await query.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –¢–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!")
            return MAIN_MENU
        
        # Store message IDs for later deletion
        context.user_data['catalog_messages'] = []
        
        # Send each tie as a separate message with photo and full info
        for i, tie in enumerate(ties):
            # Create full info text
            info_text = f"""
üéØ *{tie.name_ru}*

üé® *–¶–≤–µ—Ç:* {tie.color_ru}
üßµ *–ú–∞—Ç–µ—Ä–∏–∞–ª:* {tie.material_ru}
üí∞ *–¶–µ–Ω–∞:* {tie.price:,.0f} —Ç–≥

üìù {tie.description_ru}

üöö –î–æ—Å—Ç–∞–≤–∫–∞: 15 –¥–Ω–µ–π

‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É {tie.name_ru}?*
"""
            
            # Create button for this tie
            keyboard = [[
                InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f'tie_{tie.id}')
            ]]
            
            # Add back button only on the last tie
            if i == len(ties) - 1:
                keyboard.append([
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_menu')
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Send photo with caption and button
            if tie.image_path and os.path.exists(tie.image_path):
                with open(tie.image_path, 'rb') as photo:
                    message = await query.message.reply_photo(
                        photo=photo,
                        caption=info_text,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                    context.user_data['catalog_messages'].append(message.message_id)
            else:
                message = await query.message.reply_text(
                    info_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                context.user_data['catalog_messages'].append(message.message_id)
        
        return CATALOG_BROWSING
    
    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Return to main menu from catalog"""
        query = update.callback_query
        await query.answer()
        
        # Delete catalog messages if they exist
        if 'catalog_messages' in context.user_data:
            for msg_id in context.user_data['catalog_messages']:
                try:
                    await context.bot.delete_message(
                        chat_id=query.message.chat_id,
                        message_id=msg_id
                    )
                except:
                    pass
            context.user_data['catalog_messages'] = []
        
        return await self.show_main_menu(update, context)
    
    async def show_tie_card(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show single tie card"""
        query = update.callback_query
        
        position = context.user_data.get('catalog_position', 0)
        ties = get_all_active_ties()
        
        if position >= len(ties):
            position = 0
        
        tie = ties[position]
        
        # Create navigation keyboard
        keyboard = []
        
        # Add navigation buttons if there are multiple ties
        if len(ties) > 1:
            nav_buttons = []
            if position > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev_tie'))
            nav_buttons.append(InlineKeyboardButton(f"{position+1}/{len(ties)}", callback_data='current'))
            if position < len(ties) - 1:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='next_tie'))
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f'tie_{tie.id}')])
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_menu')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        return CATALOG_BROWSING
    
    async def navigate_catalog(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Navigate through catalog"""
        query = update.callback_query
        await query.answer()
        
        position = context.user_data.get('catalog_position', 0)
        ties = get_all_active_ties()
        if position >= len(ties):
            return CATALOG_BROWSING
        tie = ties[position]
        
        # Create card text
        card_text = f"""
üéØ *{tie.name_ru}*

üé® *{get_text(lang, 'color')}:* {tie.color_ru}
üßµ *{get_text(lang, 'material')}:* {tie.material_ru}
üí∞ *{get_text(lang, 'price')}:* {tie.price:,.0f} {get_text(lang, 'currency')}

üìù {tie.description_ru}

{get_text(lang, 'delivery')}

{get_text(lang, 'catalog_page')} {position + 1}/{len(ties)}
"""
        
        # Create navigation buttons
        keyboard = []
        
        # Navigation row
        nav_row = []
        if position > 0:
            nav_row.append(InlineKeyboardButton(get_text(lang, 'previous'), callback_data='prev_tie'))
        nav_row.append(InlineKeyboardButton(get_text(lang, 'select'), callback_data='select_tie'))
        if position < len(ties) - 1:
            nav_row.append(InlineKeyboardButton(get_text(lang, 'next'), callback_data='next_tie'))
        keyboard.append(nav_row)
        
        # Back button
        keyboard.append([InlineKeyboardButton(get_text(lang, 'main_menu'), callback_data='back_menu')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Send or update message with photo
        image_path = tie.image_path
        
        if update.callback_query:
            if image_path and os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    # Delete old message and send new one with photo
                    await update.callback_query.message.delete()
                    await update.callback_query.message.chat.send_photo(
                        photo=photo,
                        caption=card_text,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
            else:
                await update.callback_query.edit_message_text(
                    card_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        
        return CATALOG_BROWSING
    
    async def next_tie(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show next tie"""
        query = update.callback_query
        await query.answer()
        
        position = context.user_data.get('catalog_position', 0)
        ties = get_all_active_ties()
        if position < len(ties) - 1:
            context.user_data['catalog_position'] = position + 1
        
        return await self.show_tie_card(update, context)
    
    async def prev_tie(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show previous tie"""
        query = update.callback_query
        await query.answer()
        
        position = context.user_data.get('catalog_position', 0)
        if position > 0:
            context.user_data['catalog_position'] = position - 1
        
        return await self.show_tie_card(update, context)
    
    async def select_tie_by_number(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Select tie by number"""
        query = update.callback_query
        logger.info(f"SELECT_TIE_BY_NUMBER callback from user {update.effective_user.id}: {query.data}")
        await query.answer()
        
        lang = 'ru'  # Force Russian
        tie_id = int(query.data.replace('tie_', ''))
        tie = get_tie_by_id(tie_id)
        
        if not tie:
            await query.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return CATALOG_BROWSING
        
        context.user_data['selected_tie'] = tie
        context.user_data['selected_tie_id'] = tie_id
        
        # Delete all other catalog messages except the selected one
        if 'catalog_messages' in context.user_data:
            for msg_id in context.user_data['catalog_messages']:
                if msg_id != query.message.message_id:
                    try:
                        await context.bot.delete_message(
                            chat_id=query.message.chat_id,
                            message_id=msg_id
                        )
                    except:
                        pass  # Message might already be deleted
        
        # Update the selected tie message with confirmation buttons
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data='confirm_yes'),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='confirm_no')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Create beautiful tie card
        info_text = f"""
üõçÔ∏è *–í–´–ë–†–ê–ù–ù–´–ô –¢–û–í–ê–†*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ *{tie.name_ru}*

üé® *–¶–≤–µ—Ç:* {tie.color_ru}
üßµ *–ú–∞—Ç–µ—Ä–∏–∞–ª:* {tie.material_ru}
üí∞ *–¶–µ–Ω–∞:* *{tie.price:,.0f} —Ç–≥*

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
{tie.description_ru}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* 15 –¥–Ω–µ–π –ø–æ –≤—Å–µ–º—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É
üí≥ *–û–ø–ª–∞—Ç–∞:* –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏

‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É {tie.name_ru}?*
"""
        
        # Check if the message has a photo (caption) or just text
        try:
            # Try to edit caption first (for messages with photos)
            await query.edit_message_caption(
                caption=info_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except:
            # If that fails, try to edit text (for messages without photos)
            try:
                await query.edit_message_text(
                    text=info_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                # As a fallback, send a new message
                await query.message.reply_text(
                    info_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        
        return TIE_SELECTED
    
    async def confirm_purchase(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Start order process"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"=== CONFIRM_PURCHASE START ===")
        logger.info(f"Query data: {query.data}")
        logger.info(f"User data: {context.user_data}")
        
        lang = 'ru'  # Force Russian
        
        if query.data == 'confirm_yes':
            logger.info(f"User confirmed purchase, requesting name")
            context.user_data['current_state'] = NAME
            await query.message.reply_text(
                "üí≥ *–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞:*\n\n"
                "_–£–∫–∞–∂–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É "
                "(—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞)_",
                parse_mode='Markdown'
            )
            logger.info(f"Returning NAME state")
            return NAME
        else:
            logger.info(f"User cancelled purchase")
            await query.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            return await self.show_main_menu(update, context)
    
    async def handle_message_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if update.message.photo:
            logger.info(f"Photo received in handle_message_input for user {user_id}")
            await self.handle_catalog_photo(update, context)
            return context.user_data.get('current_state', NAME)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message.text:
            logger.warning(f"No text in message for user {user_id}")
            return context.user_data.get('current_state', NAME)
        
        text = update.message.text
        
        logger.info(f"=== HANDLE_MESSAGE_INPUT START ===")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Message text: '{text}'")
        logger.info(f"User data: {context.user_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–°–ê–ú–´–ô –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
        if user_id in ADMIN_IDS and context.user_data.get('waiting_for_clear_confirmation'):
            if text == 'CONFIRM_CLEAR_ALL':
                await update.message.reply_text("üóëÔ∏è –û—á–∏—â–∞—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...")
                
                from database import clear_all_data
                if clear_all_data():
                    await update.message.reply_text(
                        "‚úÖ **–î–ê–ù–ù–´–ï –û–ß–ò–©–ï–ù–´!**\n\n"
                        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Ä—ã–Ω–æ–∫:\n"
                        "‚Ä¢ –í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã\n"
                        "‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã\n"
                        "‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
                        "üöÄ **–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!**"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
                
                context.user_data['waiting_for_clear_confirmation'] = False
                return
            elif text == 'CANCEL':
                await update.message.reply_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞")
                context.user_data['waiting_for_clear_confirmation'] = False
                return
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ:\n"
                    "‚Ä¢ **CONFIRM_CLEAR_ALL** - –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                    "‚Ä¢ **CANCEL** - –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
        if user_id in ADMIN_IDS and context.user_data.get('pending_delivery_order'):
            logger.info(f"Admin input days mode, delegating to admin_input_days")
            await self.admin_input_days(update, context)
            return context.user_data.get('current_state', NAME)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
        if context.user_data.get('editing_active'):
            logger.info(f"User in editing mode, delegating to handle_edit_input")
            logger.info(f"Editing tie: {context.user_data.get('editing_tie')}")
            logger.info(f"Editing field: {context.user_data.get('editing_field')}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            if user_id in ADMIN_IDS:
                await update.message.reply_text(
                    f"üîç –û–¢–õ–ê–î–ö–ê: –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω\n"
                    f"–¢–æ–≤–∞—Ä ID: {context.user_data.get('editing_tie')}\n"
                    f"–ü–æ–ª–µ: {context.user_data.get('editing_field')}\n"
                    f"–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}'"
                )
            
            result = await self.handle_edit_input(update, context)
            logger.info(f"handle_edit_input returned: {result}")
            return context.user_data.get('current_state', NAME)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–ù–ò–ó–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
        if context.user_data.get('adding_tie'):
            logger.info(f"User in adding tie mode, delegating to handle_catalog_input")
            await self.handle_catalog_input(update, context)
            return context.user_data.get('current_state', NAME)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
        if context.user_data.get('broadcast_active'):
            logger.info(f"User in broadcast mode, delegating to handle_broadcast_message")
            await self.handle_broadcast_message(update, context)
            return context.user_data.get('current_state', NAME)
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
        current_state = context.user_data.get('current_state', NAME)
        
        if current_state == NAME:
            return await self.receive_name(update, context)
        elif current_state == SURNAME:
            return await self.receive_surname(update, context)
        elif current_state == PHONE:
            return await self.receive_phone(update, context)
        elif current_state == ADDRESS:
            return await self.receive_address(update, context)
        elif current_state is None:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ None, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"Current state is None and no active modes, ignoring message")
            return NAME
        else:
            logger.warning(f"Unknown current state: {current_state}")
            return NAME

    async def receive_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Receive and validate name"""
        user_id = update.effective_user.id
        text = update.message.text
        
        logger.info(f"=== RECEIVE_NAME START ===")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Message text: '{text}'")
        logger.info(f"User data: {context.user_data}")
        
        lang = 'ru'  # Force Russian
        name = update.message.text.strip()
        
        # Check if user is in adding tie mode
        if context.user_data.get('adding_tie'):
            logger.info(f"User in adding tie mode, delegating to handle_catalog_input")
            await self.handle_catalog_input(update, context)
            return NAME
        
        # Check if user is in editing mode
        if context.user_data.get('editing_active'):
            logger.info(f"User in editing mode, delegating to handle_edit_input")
            await self.handle_edit_input(update, context)
            return NAME
        
        # Check if user is in broadcast mode
        if context.user_data.get('broadcast_active'):
            logger.info(f"User in broadcast mode, delegating to handle_broadcast_message")
            await self.handle_broadcast_message(update, context)
            return NAME
        
        # Note: Removed isdigit() check as names should be processed normally
        
        if len(name) < 2:
            await update.message.reply_text("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
            return NAME
        
        if not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]+$', name):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
            return NAME
        
        context.user_data['recipient_name'] = name
        context.user_data['current_state'] = SURNAME
        await update.message.reply_text(
            "üë§ *–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞:*\n\n"
            "_–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É_",
            parse_mode='Markdown'
        )
        
        return SURNAME
    
    async def receive_surname(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Receive and validate surname"""
        lang = 'ru'  # Force Russian
        surname = update.message.text.strip()
        
        # Check if user is in adding tie mode
        if context.user_data.get('adding_tie'):
            logger.info(f"User in adding tie mode, delegating to handle_catalog_input")
            await self.handle_catalog_input(update, context)
            return SURNAME
        
        # Check if user is in editing mode
        if context.user_data.get('editing_active'):
            logger.info(f"User in editing mode, delegating to handle_edit_input")
            await self.handle_edit_input(update, context)
            return SURNAME
        
        # Check if user is in broadcast mode
        if context.user_data.get('broadcast_active'):
            logger.info(f"User in broadcast mode, delegating to handle_broadcast_message")
            await self.handle_broadcast_message(update, context)
            return SURNAME
        
        # Note: Removed isdigit() check as surnames should be processed normally
        
        if len(surname) < 2:
            await update.message.reply_text("–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:")
            return SURNAME
        
        if not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]+$', surname):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
            return SURNAME
        
        context.user_data['recipient_surname'] = surname
        context.user_data['current_state'] = PHONE
        await update.message.reply_text(
            "üì± *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞:*\n\n"
            "_–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX_\n"
            "_–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Å–≤—è–∑–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã_",
            parse_mode='Markdown'
        )
        
        return PHONE
    
    async def receive_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Receive and validate phone"""
        user_id = update.effective_user.id
        text = update.message.text
        
        logger.info(f"=== RECEIVE_PHONE START ===")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Message text: '{text}'")
        logger.info(f"User data: {context.user_data}")
        
        lang = 'ru'  # Force Russian
        phone = update.message.text.strip()
        
        # Check if user is in adding tie mode
        if context.user_data.get('adding_tie'):
            logger.info(f"User in adding tie mode, delegating to handle_catalog_input")
            await self.handle_catalog_input(update, context)
            return PHONE
        
        # Check if user is in editing mode
        if context.user_data.get('editing_active'):
            logger.info(f"User in editing mode, delegating to handle_edit_input")
            await self.handle_edit_input(update, context)
            return PHONE
        
        # Check if user is in broadcast mode
        if context.user_data.get('broadcast_active'):
            logger.info(f"User in broadcast mode, delegating to handle_broadcast_message")
            await self.handle_broadcast_message(update, context)
            return PHONE
        
        # Note: Removed isdigit() check as phone numbers should be processed normally
        
        phone_digits = re.sub(r'\D', '', phone)
        
        if not re.match(r'^(7|8)?7\d{9}$', phone_digits):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
            return PHONE
        
        if phone_digits.startswith('8'):
            phone_digits = '7' + phone_digits[1:]
        elif not phone_digits.startswith('7'):
            phone_digits = '7' + phone_digits
        
        formatted_phone = f"+{phone_digits[0]} {phone_digits[1:4]} {phone_digits[4:7]} {phone_digits[7:9]} {phone_digits[9:11]}"
        context.user_data['recipient_phone'] = f'+{phone_digits}'
        context.user_data['current_state'] = ADDRESS
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        
        return ADDRESS
    
    async def receive_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Receive address and show payment options"""
        user_id = update.effective_user.id
        text = update.message.text
        
        logger.info(f"=== RECEIVE_ADDRESS START ===")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Message text: '{text}'")
        logger.info(f"User data: {context.user_data}")
        
        lang = 'ru'  # Force Russian
        address = update.message.text.strip()
        
        if len(address) < 5:
            await update.message.reply_text("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:")
            return ADDRESS
        
        context.user_data['delivery_address'] = address
        
        # Show order summary
        tie = context.user_data['selected_tie']
        
        summary = f"""
{get_text(lang, 'order_summary')}

üéØ *{get_text(lang, 'product')}:* {tie.name_ru}
üí∞ *{get_text(lang, 'price')}:* {tie.price:,.0f} {get_text(lang, 'currency')}

üë§ *{get_text(lang, 'recipient')}:* {context.user_data['recipient_name']} {context.user_data['recipient_surname']}
üì± *{get_text(lang, 'phone')}:* {context.user_data['recipient_phone']}
üìç *{get_text(lang, 'address')}:* {context.user_data['delivery_address']}

üí≥ *{get_text(lang, 'total')}:* {tie.price:,.0f} {get_text(lang, 'currency')}
"""
        
        keyboard = [
            [InlineKeyboardButton(get_text(lang, 'pay'), callback_data='pay_order')],
            [InlineKeyboardButton(get_text(lang, 'cancel'), callback_data='cancel_order')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            summary,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        return CHECKOUT
    
    async def process_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Process payment"""
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get('language', 'ru')
        tie = context.user_data['selected_tie']
        
        # Create order
        order_data = {
            'user_telegram_id': update.effective_user.id,
            'tie_id': tie.id,
            'tie_name': tie.name_ru,
            'price': tie.price,
            'recipient_name': context.user_data['recipient_name'],
            'recipient_surname': context.user_data['recipient_surname'],
            'recipient_phone': context.user_data['recipient_phone'],
            'delivery_address': context.user_data['delivery_address'],
            'status': 'pending_payment'
        }
        
        order = create_order(order_data)
        context.user_data['order_id'] = order.id
        
        # Payment instructions
        payment_text = f"""
{get_text(lang, 'payment_instruction')}

*{get_text(lang, 'order')} #{order.id}*
*{get_text(lang, 'total')}:* {tie.price:,.0f} {get_text(lang, 'currency')}
"""
        
        keyboard = [
            [InlineKeyboardButton(get_text(lang, 'pay_button'), url=PAYMENT_LINK)],
            [InlineKeyboardButton(get_text(lang, 'paid_button'), callback_data='payment_done')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            payment_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        return PAYMENT
    
    async def payment_done(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle payment confirmation"""
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get('language', 'ru')
        order_id = context.user_data['order_id']
        tie = context.user_data['selected_tie']
        
        # Update order status
        update_order_status(order_id, 'pending_admin_review')
        
        # Send notification to all admins
        admin_message = f"""
üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*

üë§ *–ö–ª–∏–µ–Ω—Ç:* {context.user_data['recipient_name']} {context.user_data['recipient_surname']}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {context.user_data['recipient_phone']}
üìç *–ê–¥—Ä–µ—Å:* {context.user_data['delivery_address']}

üéØ *–¢–æ–≤–∞—Ä:* {tie.name_ru}
üí∞ *–°—É–º–º–∞:* {tie.price:,.0f} —Ç–≥

‚è≥ *–°—Ç–∞—Ç—É—Å:* –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞
"""
        
        # Create admin buttons
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'approve_{order_id}'),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'reject_{order_id}')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Send to all admins
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"Failed to send notification to admin {admin_id}: {e}")
        
        await query.message.reply_text(
            get_text(lang, 'order_sent'),
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END
    
    async def show_orders(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show user orders"""
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get('language', 'ru')
        user_id = update.effective_user.id
        orders = get_user_orders(user_id)
        
        if not orders:
            await query.message.reply_text(get_text(lang, 'no_orders'))
        else:
            orders_text = f"{get_text(lang, 'your_orders')}\n\n"
            
            status_map = {
                'pending_payment': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                'pending_admin_review': 'üîç –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                'in_delivery': 'üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ',
                'delivered': 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                'completed': '‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω',
                'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω'
            }
            
            for order in orders:
                status_text = status_map.get(order.status, order.status)
                orders_text += f"üì¶ *{get_text(lang, 'order')} #{order.id}*\n"
                orders_text += f"üéØ {order.tie_name}\n"
                orders_text += f"üí∞ {order.price:,} {get_text(lang, 'currency')}\n"
                orders_text += f"üìä {status_text}\n"
                orders_text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            await query.message.reply_text(orders_text, parse_mode='Markdown')
        
        return await self.show_main_menu(update, context)
    
    async def show_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show support info"""
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get('language', 'ru')
        
        await query.message.reply_text(
            get_text(lang, 'support_text'),
            parse_mode='Markdown'
        )
        
        return await self.show_main_menu(update, context)
    
    async def show_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show contact info"""
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get('language', 'ru')
        
        await query.message.reply_text(
            get_text(lang, 'support_text'),
            parse_mode='Markdown'
        )
        
        return await self.show_main_menu(update, context)
    
    async def back_to_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Go back to main menu"""
        return await self.show_main_menu(update, context)
    
    async def cancel_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Cancel order"""
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get('language', 'ru')
        
        await query.message.reply_text(
            get_text(lang, 'order_cancelled'),
            parse_mode='Markdown'
        )
        
        return await self.show_main_menu(update, context)
    
    async def debug_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Debug command to show current user data and logs"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        user_data = context.user_data
        debug_info = f"""
üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}**

**–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
```json
{json.dumps(user_data, indent=2, ensure_ascii=False)}
```

**–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã:**
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {user_data.get('editing_active', False)}
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {user_data.get('adding_tie', False)}
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞: {user_data.get('broadcast_active', False)}
‚Ä¢ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data.get('pending_delivery_order', None)}

**–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {user_data.get('current_state', 'None')}
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Ç–æ–≤–∞—Ä: {user_data.get('editing_tie', 'None')}
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ: {user_data.get('editing_field', 'None')}
‚Ä¢ –®–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {user_data.get('add_step', 'None')}
"""
        
        await update.message.reply_text(debug_info, parse_mode='Markdown')
    
    async def show_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show recent logs for debugging"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        log_info = f"""
üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞**

**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

**–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:**
‚Ä¢ `/debug` - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/logs` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ `/boss` - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

**–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤:**
–õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å (—Ç–µ—Ä–º–∏–Ω–∞–ª) –≥–¥–µ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç.
–ò—â–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "=== HANDLE_MESSAGE_INPUT START ===" –∏ "=== HANDLE_EDIT_INPUT START ==="

**–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
2. –ù–∞–∂–º–∏—Ç–µ "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"
3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
"""
        
        await update.message.reply_text(log_info, parse_mode='Markdown')
    
    async def check_database(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Check database status and show ties"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            ties = get_all_active_ties()
            
            db_info = f"""
üóÑÔ∏è **–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**

**–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:** {len(ties)}

**–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:**
"""
            
            for tie in ties:
                db_info += f"""
‚Ä¢ **ID {tie.id}:** {tie.name_ru}
  –¶–µ–Ω–∞: {tie.price} —Ç–≥
  –¶–≤–µ—Ç: {tie.color_ru}
  –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if tie.is_active else '‚ùå'}
"""
            
            if len(db_info) > 4000:  # Telegram limit
                db_info = db_info[:4000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            await update.message.reply_text(db_info, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    async def test_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Test database update functionality"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            ties = get_all_active_ties()
            if not ties:
                await update.message.reply_text("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            test_tie = ties[0]
            original_price = test_tie.price
            new_price = original_price + 100
            
            await update.message.reply_text(
                f"üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**\n\n"
                f"–¢–æ–≤–∞—Ä: {test_tie.name_ru}\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {original_price}\n"
                f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}",
                parse_mode='Markdown'
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            update_result = update_tie(test_tie.id, price=new_price)
            
            if update_result:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                updated_tie = get_tie_by_id(test_tie.id)
                if updated_tie and updated_tie.price == new_price:
                    await update.message.reply_text(
                        f"‚úÖ **–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!**\n\n"
                        f"–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å {original_price} –Ω–∞ {updated_tie.price}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        f"‚ùå **–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª!**\n\n"
                        f"–û–∂–∏–¥–∞–ª–æ—Å—å: {new_price}\n"
                        f"–ü–æ–ª—É—á–µ–Ω–æ: {updated_tie.price if updated_tie else 'None'}",
                        parse_mode='Markdown'
                    )
            else:
                await update.message.reply_text("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    async def force_migrate(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Force migration of ties from JSON to database"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
            from database import Session, Tie
            session = Session()
            session.query(Tie).delete()
            session.commit()
            session.close()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            migrate_ties_from_json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            ties = get_all_active_ties()
            
            await update.message.reply_text(
                f"‚úÖ **–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(ties)}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/db` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
    
    async def sync_json_db(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Sync JSON changes with database"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
            import json
            with open('ties_data.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            from database import Session, Tie
            session = Session()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
            existing_ties = {tie.id: tie for tie in session.query(Tie).all()}
            
            updated_count = 0
            created_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∏–∑ JSON
            for i, tie_data in enumerate(data['ties']):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID –≤ —á–∏—Å–ª–æ–≤–æ–π
                tie_id = i + 1  # 1, 2, 3, 4, 5
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                tie_update_data = {
                    'name_ru': tie_data['name'].get('ru', ''),
                    'name_kz': tie_data['name'].get('kz', ''),
                    'name_en': tie_data['name'].get('en', ''),
                    'color_ru': tie_data['color'].get('ru', ''),
                    'color_kz': tie_data['color'].get('kz', ''),
                    'color_en': tie_data['color'].get('en', ''),
                    'material_ru': tie_data['material'].get('ru', '100% —à–µ–ª–∫'),
                    'material_kz': tie_data['material'].get('kz', '100% –∂—ñ–±–µ–∫'),
                    'material_en': tie_data['material'].get('en', '100% silk'),
                    'description_ru': tie_data['description'].get('ru', ''),
                    'description_kz': tie_data['description'].get('kz', ''),
                    'description_en': tie_data['description'].get('en', ''),
                    'price': tie_data.get('price', 1500),
                    'image_path': tie_data.get('image', ''),
                    'is_active': True
                }
                
                if tie_id in existing_ties:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                    existing_tie = existing_ties[tie_id]
                    for key, value in tie_update_data.items():
                        setattr(existing_tie, key, value)
                    updated_count += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    new_tie = Tie(
                        id=tie_id,
                        **tie_update_data
                    )
                    session.add(new_tie)
                    created_count += 1
            
            session.commit()
            session.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            ties = get_all_active_ties()
            
            await update.message.reply_text(
                f"‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {updated_count}\n"
                f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {created_count}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {len(ties)}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/db` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    async def admin_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Test admin functions"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from database import Session, Order
        session = Session()
        orders = session.query(Order).filter_by(status='pending_admin_review').all()
        session.close()
        
        if not orders:
            await update.message.reply_text(
                "üìã **–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π**\n\n"
                "‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                "–°—Ç–∞—Ç—É—Å: pending_admin_review\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                parse_mode='Markdown'
            )
            return
        
        test_info = f"""
üß™ **–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len([o for o in orders if o.status == 'pending_admin_review'])}

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑  
‚Ä¢ üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
‚Ä¢ ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π

üìã **–ó–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
"""
        
        for i, order in enumerate(orders[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤
            test_info += f"\n‚Ä¢ –ó–∞–∫–∞–∑ #{order.id}: {order.tie_name} - {order.status}"
        
        if len(orders) > 5:
            test_info += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(orders) - 5} –∑–∞–∫–∞–∑–æ–≤"
        
        test_info += f"""

üí° **–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤" –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
2. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É
"""
        
        await update.message.reply_text(test_info, parse_mode='Markdown')
    
    async def edit_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Test editing functions"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ties = get_all_active_ties()
        
        if not ties:
            await update.message.reply_text(
                "üìã **–¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤**\n\n"
                "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥",
                parse_mode='Markdown'
            )
            return
        
        test_info = f"""
üß™ **–¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:**
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(ties)}

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
‚Ä¢ üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç  
‚Ä¢ üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É
‚Ä¢ üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ

üìã **–¢–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
"""
        
        for i, tie in enumerate(ties[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
            test_info += f"\n‚Ä¢ {i+1}. {tie.name_ru} (ID: {tie.id}) - {tie.price} —Ç–≥"
        
        if len(ties) > 5:
            test_info += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(ties) - 5} —Ç–æ–≤–∞—Ä–æ–≤"
        
        test_info += f"""

üí° **–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/boss` ‚Üí "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º" ‚Üí "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
4. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

üîç **–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/debug` - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/db` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/catalog` - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥
"""
        
        await update.message.reply_text(test_info, parse_mode='Markdown')
    
    async def test_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Test editing a specific tie"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ties = get_all_active_ties()
        if not ties:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        test_tie = ties[0]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
        test_price = 9999
        await update.message.reply_text(
            f"üß™ –¢–ï–°–¢ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n\n"
            f"–¢–æ–≤–∞—Ä: {test_tie.name_ru} (ID: {test_tie.id})\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {test_tie.price}\n"
            f"–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {test_price}\n\n"
            f"–í—ã–∑—ã–≤–∞–µ–º update_tie..."
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º update_tie –Ω–∞–ø—Ä—è–º—É—é
        result = update_tie(test_tie.id, price=test_price)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        updated_tie = get_tie_by_id(test_tie.id)
        
        await update.message.reply_text(
            f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢ —Ç–µ—Å—Ç–∞:\n\n"
            f"update_tie –≤–µ—Ä–Ω—É–ª: {result}\n"
            f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}\n\n"
            f"–¢–æ–≤–∞—Ä –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {updated_tie.name_ru if updated_tie else '–ù–ï –ù–ê–ô–î–ï–ù'}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {updated_tie.price if updated_tie else '–ù–ï –ù–ê–ô–î–ï–ù'}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –£–°–ü–ï–®–ù–û' if result and updated_tie and updated_tie.price == test_price else '‚ùå –û–®–ò–ë–ö–ê'}"
        )
    
    async def test_conflict(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Test conflict between number input fields"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        editing_active = context.user_data.get('editing_active', False)
        pending_delivery = context.user_data.get('pending_delivery_order')
        adding_tie = context.user_data.get('adding_tie', False)
        broadcast_active = context.user_data.get('broadcast_active', False)
        
        conflict_info = f"""
üß™ –¢–ï–°–¢ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞

üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:
‚Ä¢ –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {editing_active}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–π –∑–∞–∫–∞–∑: {pending_delivery}
‚Ä¢ –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {adding_tie}
‚Ä¢ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_active}

üîß –ü–†–ò–û–†–ò–¢–ï–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:
1. –í–≤–æ–¥ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ (–°–ê–ú–´–ô –í–´–°–®–ò–ô)
2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–í–´–°–®–ò–ô)
3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ù–ò–ó–®–ò–ô)
4. –†–∞—Å—Å—ã–ª–∫–∞ (–ù–ò–ó–®–ò–ô)
5. –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞

üí° –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ

üîç –û–¢–õ–ê–î–û–ß–ù–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ /debug - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /edit_test - —Ç–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ /admin_test - —Ç–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""
        
        await update.message.reply_text(conflict_info)
    
    async def force_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Force activate editing mode for testing"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ties = get_all_active_ties()
        if not ties:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        test_tie = ties[0]
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_tie'] = test_tie.id
        context.user_data['editing_field'] = 'price'
        context.user_data['editing_active'] = True
        context.user_data['current_state'] = None
        
        await update.message.reply_text(
            f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –†–ï–ñ–ò–ú–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø\n\n"
            f"–¢–æ–≤–∞—Ä: {test_tie.name_ru} (ID: {test_tie.id})\n"
            f"–ü–æ–ª–µ: price\n"
            f"–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –ê–ö–¢–ò–í–ï–ù\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3000)"
        )
    
    async def clear_all_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Clear all data from database - PRODUCTION LAUNCH"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # Confirmation message
        await update.message.reply_text(
            "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•**\n\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç:\n"
            "‚Ä¢ –í—Å–µ –∑–∞–∫–∞–∑—ã\n"
            "‚Ä¢ –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º!\n\n"
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: **CONFIRM_CLEAR_ALL**\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ: **CANCEL**"
        )
        
        # Set confirmation state
        context.user_data['waiting_for_clear_confirmation'] = True
    
    async def reset_ties(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Reset ties to default state from JSON"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        await update.message.reply_text("üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é —Ç–æ–≤–∞—Ä—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é...")
        
        from database import reset_ties_to_default
        
        if reset_ties_to_default():
            await update.message.reply_text(
                "‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é!\n\n"
                "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞."
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–æ–≤")
    
    async def show_catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show catalog via command"""
        user_id = update.effective_user.id
        
        # Get ties from database
        ties = get_all_active_ties()
        logger.info(f"Retrieved {len(ties)} ties from database for user {user_id}")
        
        if not ties:
            await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –¢–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!")
            return
        
        # Create beautiful catalog header
        catalog_text = f"""
üõçÔ∏è *–ö–ê–¢–ê–õ–û–ì –ì–ê–õ–°–¢–£–ö–û–í*

üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(ties)}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        
        # Add each tie to the catalog
        for i, tie in enumerate(ties):
            # Create tie entry with beautiful formatting
            tie_entry = f"""
üîπ *{i+1}. {tie.name_ru}*
   üé® –¶–≤–µ—Ç: {tie.color_ru}
   üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: {tie.material_ru}
   üí∞ –¶–µ–Ω–∞: *{tie.price:,.0f} —Ç–≥*
   üìù {tie.description_ru}
   
   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
            catalog_text += tie_entry
        
        # Add footer
        catalog_text += f"""
üí≥ *–û–ø–ª–∞—Ç–∞:* –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* 15 –¥–Ω–µ–π –ø–æ –≤—Å–µ–º—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É
üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @your_support_username

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° *–î–ª—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é*
"""
        
        # Send the catalog
        try:
            await update.message.reply_text(
                catalog_text,
                parse_mode='Markdown'
            )
            logger.info(f"Successfully sent catalog to user {user_id}")
        except Exception as e:
            logger.error(f"Error sending catalog to user {user_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    async def handle_cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        user_id = update.effective_user.id
        logger.info(f"=== CANCEL COMMAND from user {user_id} ===")
        logger.info(f"User data: {context.user_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if context.user_data.get('editing_active'):
            logger.info(f"Cancelling editing mode for user {user_id}")
            logger.info(f"Editing tie: {context.user_data.get('editing_tie')}")
            logger.info(f"Editing field: {context.user_data.get('editing_field')}")
            context.user_data['editing_tie'] = None
            context.user_data['editing_field'] = None
            context.user_data['editing_active'] = False
            context.user_data['current_state'] = None
            await update.message.reply_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            logger.info(f"Editing mode cancelled for user {user_id}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        if context.user_data.get('adding_tie'):
            logger.info(f"Cancelling adding tie mode for user {user_id}")
            context.user_data['adding_tie'] = False
            context.user_data['new_tie'] = {}
            context.user_data['add_step'] = None
            context.user_data['current_state'] = None
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
        if context.user_data.get('broadcast_active'):
            logger.info(f"Cancelling broadcast mode for user {user_id}")
            context.user_data['broadcast_active'] = False
            context.user_data['broadcast_mode'] = None
            context.user_data['target_user_id'] = None
            context.user_data['current_state'] = None
            await update.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if user_id in ADMIN_IDS and context.user_data.get('pending_delivery_order'):
            logger.info(f"Cancelling delivery input mode for admin {user_id}")
            del context.user_data['pending_delivery_order']
            context.user_data['current_state'] = None
            await update.message.reply_text("‚ùå –í–≤–æ–¥ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω")
            return
        
        # –û–±—ã—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        lang = context.user_data.get('language', 'ru')
        await update.message.reply_text(get_text(lang, 'cancelled'))
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Cancel conversation (fallback)"""
        lang = context.user_data.get('language', 'ru')
        await update.message.reply_text(get_text(lang, 'cancelled'))
        return ConversationHandler.END
    
    async def admin_approve(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Admin approves order"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞", show_alert=True)
            return
        
        order_id = int(query.data.replace('approve_', ''))
        update_order_status(order_id, 'confirmed')
        
        # Get order details
        order = get_order_by_id(order_id)
        if order:
            # Get user's language
            user_lang = get_user_language(order.user_telegram_id)
            
            # Send final receipt to customer
            final_receipt = f"""
‚úÖ *{get_text(user_lang, 'order_confirmed_title')}*

üì¶ *{get_text(user_lang, 'order')} #{order_id}*
üéØ *{get_text(user_lang, 'product')}:* {order.tie_name}
üí∞ *{get_text(user_lang, 'price')}:* {order.price:,} {get_text(user_lang, 'currency')}

üë§ *{get_text(user_lang, 'recipient')}:* {order.recipient_name} {order.recipient_surname}
üì± *{get_text(user_lang, 'phone')}:* {order.recipient_phone}
üìç *{get_text(user_lang, 'address')}:* {order.delivery_address}

üöö *{get_text(user_lang, 'delivery_time')}:* 15 {get_text(user_lang, 'days')}
üìÖ *{get_text(user_lang, 'estimated_delivery')}:* {get_text(user_lang, 'within_15_days')}

{get_text(user_lang, 'thank_you_message')}
"""
            
            try:
                await context.bot.send_message(
                    chat_id=order.user_telegram_id,
                    text=final_receipt,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to send confirmation to user {order.user_telegram_id}: {e}")
        
        await query.edit_message_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù\n–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.",
            parse_mode='Markdown'
        )
    
    async def admin_reject(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Admin rejects order"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞", show_alert=True)
            return
        
        order_id = int(query.data.replace('reject_', ''))
        update_order_status(order_id, 'rejected')
        
        await query.edit_message_text(
            f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω!\n\n–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –û–¢–ö–õ–û–ù–ï–ù",
            parse_mode='Markdown'
        )
    
    async def admin_set_delivery(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Set delivery time for order"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞", show_alert=True)
            return
        
        order_id = int(query.data.replace('setdelivery_', ''))
        context.user_data['pending_delivery_order'] = order_id
        context.user_data['current_state'] = NAME
        
        await query.message.reply_text(
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 5)",
            parse_mode='Markdown'
        )
    
    async def admin_input_days(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle admin input for delivery days"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message.text:
            logger.warning(f"No text in admin input days message for user {user_id}")
            return
        
        text = update.message.text
        
        logger.info(f"=== ADMIN_INPUT_DAYS START ===")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Message text: '{text}'")
        logger.info(f"Admin IDs: {ADMIN_IDS}")
        logger.info(f"User data: {context.user_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        if context.user_data.get('editing_active'):
            logger.info(f"Editing mode is active, ignoring admin_input_days")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if user_id in ADMIN_IDS:
            await update.message.reply_text(
                f"üîç –û–¢–õ–ê–î–ö–ê admin_input_days:\n"
                f"–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                f"–¢–µ–∫—Å—Ç: '{text}'\n"
                f"–û–∂–∏–¥–∞—é—â–∏–π –∑–∞–∫–∞–∑: {context.user_data.get('pending_delivery_order')}\n"
                f"–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {context.user_data.get('editing_active', False)}"
            )
        
        if user_id not in ADMIN_IDS:
            logger.info(f"User {user_id} not in admin list, ignoring admin_input_days")
            return
        
        if 'pending_delivery_order' not in context.user_data:
            logger.info(f"No pending delivery order for user {user_id}")
            await update.message.reply_text("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
            return
        
        try:
            days = int(update.message.text)
            order_id = context.user_data['pending_delivery_order']
            order = get_order_by_id(order_id)
            
            if order:
                update_order_status(order_id, 'in_delivery')
                user_lang = get_user_language(order.user_telegram_id)
                
                delivery_message = f"""
üì¶ *{get_text(user_lang, 'delivery_update')}*

{get_text(user_lang, 'order')} #{order_id}
üöö {get_text(user_lang, 'will_be_delivered')}: {days} {get_text(user_lang, 'days')}

{get_text(user_lang, 'prepare_to_receive')}
"""
                
                await context.bot.send_message(
                    chat_id=order.user_telegram_id,
                    text=delivery_message,
                    parse_mode='Markdown'
                )
                
                await update.message.reply_text(
                    f"‚úÖ –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π",
                    parse_mode='Markdown'
                )
            
            del context.user_data['pending_delivery_order']
            context.user_data['current_state'] = None
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    async def admin_mark_delivered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Mark order as delivered"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞", show_alert=True)
            return
        
        order_id = int(query.data.replace('delivered_', ''))
        order = get_order_by_id(order_id)
        
        logger.info(f"Admin {user_id} marking order {order_id} as delivered")
        
        if order:
            update_order_status(order_id, 'delivered')
            user_lang = get_user_language(order.user_telegram_id)
            
            logger.info(f"Order {order_id} status updated to delivered, user language: {user_lang}")
            
            keyboard = [[
                InlineKeyboardButton(
                    get_text(user_lang, 'confirm_receipt'),
                    callback_data=f'received_{order_id}'
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            delivered_message = f"""
üéâ *{get_text(user_lang, 'order_delivered')}*

{get_text(user_lang, 'order')} #{order_id}
{get_text(user_lang, 'please_confirm')}
"""
            
            logger.info(f"Sending delivery confirmation to user {order.user_telegram_id}")
            
            try:
                await context.bot.send_message(
                    chat_id=order.user_telegram_id,
                    text=delivered_message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                logger.info(f"Delivery confirmation sent successfully to user {order.user_telegram_id}")
            except Exception as e:
                logger.error(f"Failed to send delivery confirmation to user {order.user_telegram_id}: {e}")
            
            await query.edit_message_text(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π",
                parse_mode='Markdown'
            )
        else:
            logger.error(f"Order {order_id} not found")
            await query.edit_message_text(
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode='Markdown'
            )
    
    async def user_confirm_receipt(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """User confirms receipt of order"""
        query = update.callback_query
        await query.answer()
        
        order_id = int(query.data.replace('received_', ''))
        order = get_order_by_id(order_id)
        
        if order and order.user_telegram_id == update.effective_user.id:
            update_order_status(order_id, 'completed')
            lang = get_user_language(order.user_telegram_id)
            
            await query.edit_message_text(
                f"‚úÖ {get_text(lang, 'thank_you_confirm')}\n\n{get_text(lang, 'order_completed')}",
                parse_mode='Markdown'
            )
            
            # Notify admins
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}",
                        parse_mode='Markdown'
                    )
                except:
                    pass
    
    async def boss_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Boss panel with all admin functions"""
        user_id = update.effective_user.id
        logger.info(f"BOSS_PANEL command from user {user_id}")
        
        if user_id not in ADMIN_IDS:
            logger.warning(f"Non-admin user {user_id} tried to access boss panel")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # Show admin menu with inline buttons
        keyboard = [
            [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data='boss_orders')],
            [InlineKeyboardButton("üë• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='boss_monitor')],
            [InlineKeyboardButton("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞", callback_data='boss_report')],
            [InlineKeyboardButton("üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º", callback_data='boss_catalog')],
            [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data='boss_broadcast')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        admin_menu = """
üîß *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ /boss*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await update.message.reply_text(admin_menu, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def boss_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Return to boss panel"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # Show admin menu with inline buttons
        keyboard = [
            [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data='boss_orders')],
            [InlineKeyboardButton("üë• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='boss_monitor')],
            [InlineKeyboardButton("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞", callback_data='boss_report')],
            [InlineKeyboardButton("üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º", callback_data='boss_catalog')],
            [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data='boss_broadcast')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        admin_menu = """
üîß *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ /boss*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await query.edit_message_text(admin_menu, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def boss_show_orders(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show all orders from boss panel"""
        query = update.callback_query
        await query.answer()
        
        from database import Session, Order
        session = Session()
        try:
            all_orders = session.query(Order).order_by(Order.created_at.desc()).all()
            
            if not all_orders:
                await query.message.reply_text("üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            
            await query.message.reply_text("üìä *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò*", parse_mode='Markdown')
            
            # Show each order with appropriate action buttons
            for order in all_orders[:30]:  # Show last 30 orders
                status_emoji = {
                    'pending_payment': '‚è≥',
                    'pending_admin_review': 'üîç',
                    'confirmed': '‚úÖ',
                    'in_delivery': 'üöö',
                    'delivered': 'üì¶',
                    'completed': '‚úîÔ∏è',
                    'rejected': '‚ùå'
                }.get(order.status, '‚ùì')
                
                # Use the name from the order (payer's name)
                user_name = f"{order.recipient_name} {order.recipient_surname}"
                
                order_text = f"{status_emoji} *–ó–∞–∫–∞–∑ #{order.id}*\n"
                order_text += f"üë§ {user_name}\n"
                order_text += f"üì± {order.recipient_phone}\n"
                order_text += f"üéØ {order.tie_name}\n"
                order_text += f"üí∞ {order.price:,.0f} —Ç–≥\n"
                order_text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                order_text += f"üìä –°—Ç–∞—Ç—É—Å: *{order.status}*"
                
                # Create action buttons based on order status
                keyboard = []
                
                if order.status == 'pending_admin_review':
                    keyboard.append([
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'approve_{order.id}'),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{order.id}')
                    ])
                elif order.status == 'confirmed':
                    keyboard.append([
                        InlineKeyboardButton("üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f'setdelivery_{order.id}')
                    ])
                elif order.status == 'in_delivery':
                    keyboard.append([
                        InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f'delivered_{order.id}')
                    ])
                
                if keyboard:
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(
                        order_text,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                else:
                    await query.message.reply_text(
                        order_text,
                        parse_mode='Markdown'
                    )
            
        finally:
            session.close()
    
    async def boss_monitor(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Monitor active users from boss panel"""
        query = update.callback_query
        await query.answer()
        
        from database import Session, User, Order
        from datetime import datetime, timedelta
        
        session = Session()
        try:
            # Get all users
            all_users = session.query(User).all()
            
            # Time thresholds
            now = datetime.now()
            last_hour = now - timedelta(hours=1)
            last_24h = now - timedelta(hours=24)
            last_week = now - timedelta(days=7)
            
            monitoring_text = "üë• *–ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*\n\n"
            monitoring_text += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
            monitoring_text += f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M')}\n"
            monitoring_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            
            # Active RIGHT NOW (last hour)
            monitoring_text += "üî¥ *–°–ï–ô–ß–ê–° –ê–ö–¢–ò–í–ù–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å):*\n"
            active_now = []
            
            for user in all_users:
                recent_order = session.query(Order).filter(
                    Order.user_telegram_id == user.telegram_id,
                    Order.created_at >= last_hour
                ).order_by(Order.created_at.desc()).first()
                
                if recent_order:
                    minutes_ago = int((now - recent_order.created_at).total_seconds() / 60)
                    active_now.append({
                        'user': user,
                        'order': recent_order,
                        'minutes_ago': minutes_ago
                    })
            
            if active_now:
                for item in sorted(active_now, key=lambda x: x['minutes_ago']):
                    user = item['user']
                    order = item['order']
                    
                    # Get user name from Telegram
                    try:
                        tg_user = await context.bot.get_chat(user.telegram_id)
                        user_name = tg_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        if tg_user.last_name:
                            user_name += f" {tg_user.last_name}"
                    except:
                        user_name = f"ID: {user.telegram_id}"
                    
                    monitoring_text += f"üë§ *{user_name}*\n"
                    monitoring_text += f"   ID: `{user.telegram_id}`\n"
                    monitoring_text += f"   üì± –î–µ–π—Å—Ç–≤–∏–µ: {order.status}\n"
                    monitoring_text += f"   ‚è∞ {item['minutes_ago']} –º–∏–Ω –Ω–∞–∑–∞–¥\n\n"
            else:
                monitoring_text += "   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö\n\n"
            
            # Active today (last 24 hours)
            monitoring_text += "üü° *–ê–ö–¢–ò–í–ù–´ –°–ï–ì–û–î–ù–Ø (24—á):*\n"
            active_today_count = 0
            
            for user in all_users:
                recent_order = session.query(Order).filter(
                    Order.user_telegram_id == user.telegram_id,
                    Order.created_at >= last_24h
                ).first()
                
                if recent_order:
                    active_today_count += 1
            
            monitoring_text += f"   –í—Å–µ–≥–æ: {active_today_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            
            # All users with order statistics
            monitoring_text += "üìã *–í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:*\n"
            
            for user in all_users[:20]:  # Show first 20 users
                user_orders = session.query(Order).filter(
                    Order.user_telegram_id == user.telegram_id
                ).all()
                
                last_order = session.query(Order).filter(
                    Order.user_telegram_id == user.telegram_id
                ).order_by(Order.created_at.desc()).first()
                
                # Get user name from Telegram
                try:
                    tg_user = await context.bot.get_chat(user.telegram_id)
                    user_name = tg_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    if tg_user.last_name:
                        user_name += f" {tg_user.last_name}"
                except:
                    user_name = f"ID: {user.telegram_id}"
                
                monitoring_text += f"‚Ä¢ {user_name} (`{user.telegram_id}`)\n"
                monitoring_text += f"  üì¶ –ó–∞–∫–∞–∑–æ–≤: {len(user_orders)}"
                
                if last_order:
                    days_ago = (now - last_order.created_at).days
                    if days_ago == 0:
                        monitoring_text += f" | –ü–æ—Å–ª–µ–¥–Ω–∏–π: —Å–µ–≥–æ–¥–Ω—è\n"
                    elif days_ago == 1:
                        monitoring_text += f" | –ü–æ—Å–ª–µ–¥–Ω–∏–π: –≤—á–µ—Ä–∞\n"
                    else:
                        monitoring_text += f" | –ü–æ—Å–ª–µ–¥–Ω–∏–π: {days_ago} –¥–Ω. –Ω–∞–∑–∞–¥\n"
                else:
                    monitoring_text += " | –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
            
            monitoring_text += f"\nüìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
            monitoring_text += f"üî¥ –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã: {len(active_now)}\n"
            monitoring_text += f"üü° –ó–∞ 24 —á–∞—Å–∞: {active_today_count}\n"
            monitoring_text += f"üìä –í—Å–µ–≥–æ: {len(all_users)}"
            
            await query.message.reply_text(monitoring_text, parse_mode='Markdown')
            
        finally:
            session.close()
    
    async def boss_catalog_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Catalog management menu"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data='add_tie')],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='list_ties')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='boss_back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üõçÔ∏è *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–û–ú*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def boss_list_ties(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """List all ties for editing"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"BOSS_LIST_TIES callback from user {update.effective_user.id}")
        
        try:
            ties = get_all_active_ties()
            logger.info(f"Retrieved {len(ties)} ties from database")
        
            if not ties:
                logger.info("No ties found in database")
                await query.message.reply_text("üìã –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
                return
        
            await query.message.reply_text("üìã *–¢–ï–ö–£–©–ò–ï –¢–û–í–ê–†–´ –í –ö–ê–¢–ê–õ–û–ì–ï:*\n", parse_mode='Markdown')
            
            for i, tie in enumerate(ties):
                logger.info(f"Processing tie {i+1}: {tie.name_ru} (ID: {tie.id})")
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_tie_{tie.id}'),
                        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_tie_{tie.id}')
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                tie_info = f"""
*{i+1}. {tie.name_ru}*
üé® –¶–≤–µ—Ç: {tie.color_ru}
üí∞ –¶–µ–Ω–∞: {tie.price:.0f} —Ç–≥
üìù {tie.description_ru}
"""
                
                if tie.image_path and os.path.exists(tie.image_path):
                    logger.info(f"Sending photo for tie {tie.id}: {tie.image_path}")
                    try:
                        with open(tie.image_path, 'rb') as photo:
                            await query.message.reply_photo(
                                photo=photo,
                                caption=tie_info,
                                parse_mode='Markdown',
                                reply_markup=reply_markup
                            )
                    except Exception as e:
                        logger.error(f"Error sending photo for tie {tie.id}: {e}")
                        await query.message.reply_text(
                            f"{tie_info}\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                else:
                    logger.info(f"No image for tie {tie.id} or file not found: {tie.image_path}")
                    await query.message.reply_text(
                        f"{tie_info}\nüì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                    
        except Exception as e:
            logger.error(f"Error in boss_list_ties: {e}")
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {str(e)}")
    
    async def boss_add_tie(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Start adding new tie"""
        query = update.callback_query
        await query.answer()
        
        # Clear any broadcast state
        context.user_data['broadcast_active'] = False
        context.user_data['broadcast_mode'] = None
        context.user_data['target_user_id'] = None
        
        context.user_data['adding_tie'] = True
        context.user_data['new_tie'] = {}
        context.user_data['add_step'] = 'name_ru'
        context.user_data['current_state'] = NAME
        
        await query.message.reply_text(
            "‚ûï *–î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –¢–û–í–ê–†–ê*\n\n"
            "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω—ã–π —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –≥–∞–ª—Å—Ç—É–∫\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode='Markdown'
        )
    
    async def boss_edit_tie(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Edit existing tie"""
        query = update.callback_query
        await query.answer()
        
        tie_id = int(query.data.replace('edit_tie_', ''))
        tie = get_tie_by_id(tie_id)
        
        if not tie:
            await query.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        context.user_data['editing_tie'] = tie_id
        context.user_data['editing_field'] = None
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f'edit_field_name_{tie_id}')],
            [InlineKeyboardButton("üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç", callback_data=f'edit_field_color_{tie_id}')],
            [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f'edit_field_price_{tie_id}')],
            [InlineKeyboardButton("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'edit_field_desc_{tie_id}')],
            [InlineKeyboardButton("üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f'edit_field_photo_{tie_id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_edit')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            f"‚úèÔ∏è *–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê*\n\n"
            f"üì¶ *{tie.name_ru}*\n"
            f"üé® –¶–≤–µ—Ç: {tie.color_ru}\n"
            f"üí∞ –¶–µ–Ω–∞: {tie.price:.0f} —Ç–≥\n"
            f"üìù {tie.description_ru}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def handle_edit_field(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle field editing selection"""
        query = update.callback_query
        await query.answer()
        
        # Parse the callback data: edit_field_<field>_<id>
        parts = query.data.split('_')
        field = parts[2]
        tie_id = int(parts[3])
        
        context.user_data['editing_tie'] = tie_id
        context.user_data['editing_field'] = field
        context.user_data['editing_active'] = True
        context.user_data['current_state'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        field_names = {
            'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
            'color': '—Ü–≤–µ—Ç',
            'price': '—Ü–µ–Ω—É',
            'desc': '–æ–ø–∏—Å–∞–Ω–∏–µ',
            'photo': '—Ñ–æ—Ç–æ'
        }
        
        if field == 'photo':
            await query.message.reply_text(
                f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n\n"
                f"–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                parse_mode='Markdown'
            )
        else:
            await query.message.reply_text(
                f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è *{field_names[field]}*\n\n"
                f"–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                parse_mode='Markdown'
            )
    
    async def cancel_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Cancel editing"""
        query = update.callback_query
        await query.answer()
        
        context.user_data['editing_tie'] = None
        context.user_data['editing_field'] = None
        context.user_data['editing_active'] = False
        context.user_data['current_state'] = None
        
        await query.message.reply_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    async def handle_edit_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle input for editing fields"""
        logger.info(f"=== HANDLE_EDIT_INPUT CALLED ===")
        logger.info(f"Editing active: {context.user_data.get('editing_active')}")
        logger.info(f"Editing tie: {context.user_data.get('editing_tie')}")
        logger.info(f"Editing field: {context.user_data.get('editing_field')}")
        
        if not context.user_data.get('editing_active'):
            logger.info("Editing not active, returning")
            return
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            logger.info(f"User {user_id} not admin, returning")
            return
        
        text = update.message.text
        logger.info(f"Input text: {text}")
        
        if text == '/cancel':
            context.user_data['editing_tie'] = None
            context.user_data['editing_field'] = None
            context.user_data['editing_active'] = False
            await update.message.reply_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        tie_id = context.user_data.get('editing_tie')
        field = context.user_data.get('editing_field')
        
        if tie_id is None or field is None:
            logger.warning(f"Missing tie_id or field: tie_id={tie_id}, field={field}")
            return
        
        # Update tie in database
        update_data = {}
        
        if field == 'name':
            update_data = {
                'name_ru': text,
                'name_kz': text,
                'name_en': text
            }
        elif field == 'color':
            update_data = {
                'color_ru': text,
                'color_kz': text,
                'color_en': text
            }
        elif field == 'price':
            try:
                price = float(text)
                update_data = {'price': price}
            except ValueError:
                await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
        elif field == 'desc':
            update_data = {
                'description_ru': text,
                'description_kz': text,
                'description_en': text
            }
        
        logger.info(f"Updating tie {tie_id} with data: {update_data}")
        
        # Update in database
        if update_tie(tie_id, **update_data):
            # Clear editing state
            context.user_data['editing_tie'] = None
            context.user_data['editing_field'] = None
            context.user_data['editing_active'] = False
            
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!",
                parse_mode='Markdown'
            )
            logger.info(f"Tie {tie_id} updated successfully")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
            logger.error(f"Failed to update tie {tie_id}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        if context.user_data.get('adding_tie'):
            logger.warning(f"Adding tie mode is active, but trying to edit. This should not happen!")
            return
        
        if user_id not in ADMIN_IDS:
            logger.info(f"User {user_id} not in admin list, ignoring edit input")
            return
        
        tie_id = context.user_data.get('editing_tie')
        field = context.user_data.get('editing_field')
        
        if tie_id is None or field is None:
            logger.warning(f"Missing editing data: tie_id={tie_id}, field={field}")
            return
        
        # Update the tie in database
        logger.info(f"Updating tie {tie_id}, field: {field}, value: {text}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        if user_id in ADMIN_IDS:
            await update.message.reply_text(
                f"üîç –û–¢–õ–ê–î–ö–ê –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:\n"
                f"–¢–æ–≤–∞—Ä ID: {tie_id}\n"
                f"–ü–æ–ª–µ: {field}\n"
                f"–ó–Ω–∞—á–µ–Ω–∏–µ: '{text}'\n"
                f"–í—ã–∑—ã–≤–∞–µ–º update_tie..."
            )
        
        if field == 'name':
            logger.info(f"Updating name field for tie {tie_id}")
            update_result = update_tie(tie_id, name_ru=text, name_kz=text, name_en=text)
            logger.info(f"Update result for name: {update_result}")
            if not update_result:
                logger.error(f"Failed to update name for tie {tie_id}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
                return
        elif field == 'color':
            logger.info(f"Updating color field for tie {tie_id}")
            update_result = update_tie(tie_id, color_ru=text, color_kz=text, color_en=text)
            if not update_result:
                logger.error(f"Failed to update color for tie {tie_id}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞")
                return
        elif field == 'price':
            logger.info(f"Updating price field for tie {tie_id}")
            try:
                price = int(text)
                logger.info(f"Parsed price: {price}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                if user_id in ADMIN_IDS:
                    await update.message.reply_text(
                        f"üîç –û–¢–õ–ê–î–ö–ê —Ü–µ–Ω—ã:\n"
                        f"–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã: {price}\n"
                        f"–¢–æ–≤–∞—Ä ID: {tie_id}\n"
                        f"–í—ã–∑—ã–≤–∞–µ–º update_tie..."
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                tie_before = get_tie_by_id(tie_id)
                if not tie_before:
                    logger.error(f"Tie {tie_id} not found before update")
                    await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                logger.info(f"Tie before update: {tie_before.name_ru}, price: {tie_before.price}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                update_result = update_tie(tie_id, price=price)
                logger.info(f"Update result for price: {update_result}")
                
                if user_id in ADMIN_IDS:
                    await update.message.reply_text(
                        f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
                        f"update_tie –≤–µ—Ä–Ω—É–ª: {update_result}\n"
                        f"–¢–∏–ø: {type(update_result)}"
                    )
                
                if update_result:
                    logger.info(f"Successfully updated price to {price}")
                else:
                    logger.error(f"Failed to update price for tie {tie_id}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                tie_after = get_tie_by_id(tie_id)
                if tie_after:
                    logger.info(f"Tie after update: {tie_after.name_ru}, price: {tie_after.price}")
                    if user_id in ADMIN_IDS:
                        await update.message.reply_text(
                            f"üîç –ü–†–û–í–ï–†–ö–ê –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
                            f"–¢–æ–≤–∞—Ä: {tie_after.name_ru}\n"
                            f"–¶–µ–Ω–∞: {tie_after.price}"
                        )
                else:
                    logger.error(f"Tie {tie_id} not found after update")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                    return
                    
            except ValueError:
                logger.error(f"Invalid price format: {text}")
                await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            except Exception as e:
                logger.error(f"Error updating price: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")
                return
        elif field == 'desc':
            logger.info(f"Updating description field for tie {tie_id}")
            update_result = update_tie(tie_id, description_ru=text, description_kz=text, description_en=text)
            if not update_result:
                logger.error(f"Failed to update description for tie {tie_id}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
                return
        
        # Get updated tie for confirmation
        tie = get_tie_by_id(tie_id)
        if not tie:
            logger.error(f"Tie {tie_id} not found after update for confirmation")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
            return
        
        logger.info(f"Confirmation: Updated tie {tie.name_ru} with price {tie.price}")
        
        # Clear editing state
        context.user_data['editing_tie'] = None
        context.user_data['editing_field'] = None
        context.user_data['editing_active'] = False
        context.user_data['current_state'] = None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π
        if field == 'price':
            await update.message.reply_text(
                f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ *{tie.name_ru}* —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{tie.price}* —Ç–µ–Ω–≥–µ!",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä *{tie.name_ru}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                parse_mode='Markdown'
            )
    
    async def boss_delete_tie(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Delete tie from catalog"""
        query = update.callback_query
        await query.answer()
        
        tie_id = int(query.data.replace('delete_tie_', ''))
        tie = get_tie_by_id(tie_id)
        
        if not tie:
            await query.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Soft delete in database
        if delete_tie(tie_id):
            await query.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä *{tie.name_ru}* —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞",
                parse_mode='Markdown'
            )
        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
    
    async def handle_catalog_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle step-by-step catalog input"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message.text:
            logger.warning(f"No text in catalog input message for user {user_id}")
            return
        
        text = update.message.text
        logger.info(f"=== HANDLE_CATALOG_INPUT START ===")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Message text: '{text}'")
        logger.info(f"Admin IDs: {ADMIN_IDS}")
        logger.info(f"User data: {context.user_data}")
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ñ–ò–ú –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –û–ß–ò–°–¢–ö–ò (–°–ê–ú–´–ô –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
        if user_id in ADMIN_IDS and context.user_data.get('waiting_for_clear_confirmation'):
            if text == 'CONFIRM_CLEAR_ALL':
                await update.message.reply_text("üóëÔ∏è –û—á–∏—â–∞—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...")
                
                from database import clear_all_data
                if clear_all_data():
                    await update.message.reply_text(
                        "‚úÖ **–î–ê–ù–ù–´–ï –û–ß–ò–©–ï–ù–´!**\n\n"
                        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Ä—ã–Ω–æ–∫:\n"
                        "‚Ä¢ –í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã\n"
                        "‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã\n"
                        "‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
                        "üöÄ **–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!**"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
                
                context.user_data['waiting_for_clear_confirmation'] = False
                return
            elif text == 'CANCEL':
                await update.message.reply_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞")
                context.user_data['waiting_for_clear_confirmation'] = False
                return
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ:\n"
                    "‚Ä¢ **CONFIRM_CLEAR_ALL** - –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                    "‚Ä¢ **CANCEL** - –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
                return
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ñ–ò–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø (–í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
        if context.user_data.get('editing_active'):
            logger.info(f"Editing mode active, delegating to handle_edit_input from handle_catalog_input")
            return await self.handle_edit_input(update, context)
        
        # Check for admin-specific modes first (only for admins)
        if user_id in ADMIN_IDS:
            # Check for pending delivery order first (highest priority)
            if context.user_data.get('pending_delivery_order'):
                logger.info(f"Pending delivery order for admin {user_id}, delegating to admin_input_days")
                return await self.admin_input_days(update, context)
            # Check for broadcast mode
            elif context.user_data.get('broadcast_active'):
                logger.info(f"Broadcast mode active for admin {user_id}")
                return await self.handle_broadcast_message(update, context)
            # Check for adding tie mode
            elif context.user_data.get('adding_tie'):
                logger.info(f"Adding tie mode active for admin {user_id}")
                # Process tie addition
                pass  # Continue with tie processing below
            else:
                logger.info(f"No active admin mode for admin {user_id}, ignoring message in handle_catalog_input")
                return  # No active mode for admin
        else:
            # For non-admin users, check if they have any active modes
            if not any([
                context.user_data.get('adding_tie'),
                context.user_data.get('editing_active'),
                context.user_data.get('broadcast_active'),
                context.user_data.get('pending_delivery_order')
            ]):
                logger.info(f"No active mode for regular user {user_id}, ignoring message")
                return  # No active mode for regular user
        
        step = context.user_data.get('add_step')
        
        logger.info(f"Text: '{text}', Step: {step}")
        logger.info(f"Adding tie: {context.user_data.get('adding_tie')}")
        
        # Check if we should process this message
        if not context.user_data.get('adding_tie'):
            logger.info(f"No adding_tie mode active, ignoring message in handle_catalog_input")
            return
        
        logger.info(f"Processing message in handle_catalog_input")
        
        
        # Process each step
        if step == 'name_ru':
            context.user_data['new_tie']['name_ru'] = text
            context.user_data['new_tie']['name_kz'] = text  # Use same name for Kazakh
            context.user_data['add_step'] = 'color_ru'
            await update.message.reply_text(
                "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
                "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω—ã–π",
                parse_mode='Markdown'
            )
            return  # Important: stop processing after sending message
        
        elif step == 'color_ru':
            context.user_data['new_tie']['color_ru'] = text
            context.user_data['new_tie']['color_kz'] = text  # Use same color for Kazakh
            context.user_data['add_step'] = 'price'
            await update.message.reply_text(
                "‚úÖ –¶–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
                "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500",
                parse_mode='Markdown'
            )
            return  # Important: stop processing after sending message
        
        elif step == 'price':
            try:
                price = int(text)
                context.user_data['new_tie']['price'] = price
                context.user_data['add_step'] = 'desc_ru'
                await update.message.reply_text(
                    "‚úÖ –¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
                    "–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –≥–∞–ª—Å—Ç—É–∫ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤",
                    parse_mode='Markdown'
                )
                return  # Important: stop processing after sending message
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)")
                return  # Important: stop processing after error
        
        elif step == 'desc_ru':
            context.user_data['new_tie']['desc_ru'] = text
            context.user_data['new_tie']['desc_kz'] = text  # Use same description for Kazakh
            context.user_data['add_step'] = 'photo'
            await update.message.reply_text(
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
                "–®–∞–≥ 5/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞",
                parse_mode='Markdown'
            )
            return  # Important: stop processing text messages when waiting for photo
    
    async def handle_catalog_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle photo upload for new tie or editing existing tie"""
        user_id = update.effective_user.id
        logger.info(f"=== HANDLE_CATALOG_PHOTO START ===")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Admin IDs: {ADMIN_IDS}")
        logger.info(f"User data: {context.user_data}")
        
        if user_id not in ADMIN_IDS:
            logger.info(f"User {user_id} not in admin list, ignoring photo")
            return
        
        # Check if we're adding a new tie
        if context.user_data.get('adding_tie') and context.user_data.get('add_step') == 'photo':
            logger.info(f"Handling new tie photo for user {user_id}")
            await self._handle_new_tie_photo(update, context)
        # Check if we're editing an existing tie
        elif context.user_data.get('editing_active') and context.user_data.get('editing_field') == 'photo':
            logger.info(f"Handling edit tie photo for user {user_id}")
            await self._handle_edit_tie_photo(update, context)
        else:
            logger.info(f"No active photo mode for user {user_id}, ignoring photo")
            return
    
    async def _handle_new_tie_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle photo upload for new tie"""
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        
        import uuid
        
        # Download photo
        photo_file = await update.message.photo[-1].get_file()
        file_extension = photo_file.file_path.split('.')[-1]
        filename = f"TieUp/{uuid.uuid4()}.{file_extension}"
        
        # Create directory if not exists
        os.makedirs("TieUp", exist_ok=True)
        await photo_file.download_to_drive(filename)
        
        # Create new tie in database
        new_tie_data = context.user_data['new_tie']
        
        tie_id = create_tie(
            name_ru=new_tie_data['name_ru'],
            color_ru=new_tie_data['color_ru'],
            price=new_tie_data['price'],
            description_ru=new_tie_data['desc_ru'],
            image_path=filename
        )
        
        # Clear context
        context.user_data['adding_tie'] = False
        context.user_data['new_tie'] = {}
        context.user_data['add_step'] = None
        context.user_data['current_state'] = None
        
        await update.message.reply_text(
            f"‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!*\n\n"
            f"ID: {tie_id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_tie_data['name_ru']}\n"
            f"–¶–≤–µ—Ç: {new_tie_data['color_ru']}\n"
            f"–¶–µ–Ω–∞: {new_tie_data['price']} —Ç–≥\n\n"
            f"–¢–æ–≤–∞—Ä —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!",
            parse_mode='Markdown'
        )
    
    async def _handle_edit_tie_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle photo upload for editing existing tie"""
        import uuid
        
        # Download photo
        photo_file = await update.message.photo[-1].get_file()
        file_extension = photo_file.file_path.split('.')[-1]
        filename = f"TieUp/{uuid.uuid4()}.{file_extension}"
        
        # Create directory if not exists
        os.makedirs("TieUp", exist_ok=True)
        await photo_file.download_to_drive(filename)
        
        # Update tie in database
        tie_id = context.user_data.get('editing_tie')
        update_tie(tie_id, image_path=filename)
        
        # Get updated tie for confirmation
        tie = get_tie_by_id(tie_id)
        
        # Clear editing state
        context.user_data['editing_tie'] = None
        context.user_data['editing_field'] = None
        context.user_data['editing_active'] = False
        context.user_data['current_state'] = None
        
        await update.message.reply_text(
            f"‚úÖ *–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\n\n"
            f"üì¶ *{tie.name_ru}*\n"
            f"üé® –¶–≤–µ—Ç: {tie.color_ru}\n"
            f"üí∞ –¶–µ–Ω–∞: {tie.price:,.0f} —Ç–≥\n"
            f"üìù {tie.description_ru}",
            parse_mode='Markdown'
        )
    
    async def boss_broadcast_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Broadcast menu for admin"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data='broadcast_all')],
            [InlineKeyboardButton("üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ–º—É", callback_data='broadcast_one')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='boss_back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì® *–†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def broadcast_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Start broadcast to all users"""
        query = update.callback_query
        await query.answer()
        
        # Clear any tie adding state
        context.user_data['adding_tie'] = False
        context.user_data['new_tie'] = {}
        context.user_data['add_step'] = None
        
        context.user_data['broadcast_mode'] = 'all'
        context.user_data['broadcast_active'] = True
        context.user_data['current_state'] = NAME
        
        await query.message.reply_text(
            "üì¢ *–†–ê–°–°–´–õ–ö–ê –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º.\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode='Markdown'
        )
    
    async def broadcast_one(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Start broadcast to one user - show user selection"""
        query = update.callback_query
        logger.info(f"BROADCAST_ONE callback from user {update.effective_user.id}")
        await query.answer()
        
        # Clear any tie adding state
        context.user_data['adding_tie'] = False
        context.user_data['new_tie'] = {}
        context.user_data['add_step'] = None
        
        context.user_data['broadcast_mode'] = 'one'
        context.user_data['broadcast_active'] = True
        context.user_data['current_state'] = NAME
        
        logger.info(f"Broadcast mode set to 'one' for user {update.effective_user.id}")
        
        # Get users from database
        from database import Session, User
        session = Session()
        try:
            users = session.query(User).all()
            
            if not users:
                await query.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # Create inline keyboard with users
            keyboard = []
            for user in users:
                # Create user display name - prioritize first_name + last_name, then username, then ID
                if user.first_name and user.last_name:
                    display_name = f"{user.first_name} {user.last_name}"
                elif user.first_name:
                    display_name = user.first_name
                elif user.username:
                    display_name = f"@{user.username}"
                else:
                    display_name = f"ID: {user.telegram_id}"
                
                callback_data = f"select_user_{user.telegram_id}"
                keyboard.append([InlineKeyboardButton(display_name, callback_data=callback_data)])
            
            # Add cancel button
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
        
            await query.message.reply_text(
                "üë§ *–í–´–ë–ï–†–ò–¢–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error getting users for broadcast: {e}")
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        finally:
            session.close()
    
    async def select_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle user selection for broadcast"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            logger.info(f"User {user_id} not in admin list, ignoring select_user")
            return
        
        # Extract target user ID from callback data
        callback_data = query.data
        target_user_id = int(callback_data.replace('select_user_', ''))
        
        logger.info(f"User {user_id} selected target user {target_user_id}")
        
        # Store target user ID
        context.user_data['target_user_id'] = target_user_id
        
        # Get target user info for display
        from database import Session, User
        session = Session()
        try:
            target_user = session.query(User).filter(User.telegram_id == target_user_id).first()
            if target_user:
                display_name = f"@{target_user.username}" if target_user.username else f"ID: {target_user.telegram_id}"
                await query.message.reply_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            parse_mode='Markdown'
        )
            else:
                await query.message.reply_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {target_user_id}\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    parse_mode='Markdown'
                )
        finally:
            session.close()
    
    async def cancel_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Cancel broadcast operation"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            logger.info(f"User {user_id} not in admin list, ignoring cancel_broadcast")
            return
        
        logger.info(f"Broadcast cancelled by user {user_id}")
        
        # Reset broadcast state
        context.user_data['broadcast_active'] = False
        context.user_data['broadcast_mode'] = None
        context.user_data['target_user_id'] = None
        context.user_data['current_state'] = None
        
        await query.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    async def handle_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle broadcast messages"""
        if not context.user_data.get('broadcast_active'):
            logger.info("Broadcast not active, ignoring message")
            return
        
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            logger.info(f"User {user_id} not in admin list, ignoring broadcast message")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message.text:
            logger.warning(f"No text in broadcast message for user {user_id}")
            return
        
        text = update.message.text
        mode = context.user_data.get('broadcast_mode')
        target_user_id = context.user_data.get('target_user_id')
        
        logger.info(f"Broadcast message received from user {user_id}: mode='{mode}', target_user_id={target_user_id}, text='{text[:50]}...'")
        
        
        # For mode 'one', we expect target_user_id to be already set from user selection
        if mode == 'one' and not context.user_data.get('target_user_id'):
            logger.warning(f"Mode 'one' but no target_user_id set for user {user_id}")
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # If we have target_user_id and mode is 'one', send message to that user
        if mode == 'one' and context.user_data.get('target_user_id'):
            target_id = context.user_data.get('target_user_id')
            logger.info(f"Sending message to user {target_id} from admin {user_id}")
            try:
                await context.bot.send_message(
                    chat_id=target_id,
                    text=f"üí¨ *–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:*\n\n{text}",
                    parse_mode='Markdown'
                )
                logger.info(f"Message successfully sent to user {target_id}")
                await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                
                # Reset broadcast state
                context.user_data['broadcast_active'] = False
                context.user_data['broadcast_mode'] = None
                context.user_data['target_user_id'] = None
                context.user_data['current_state'] = None
                logger.info(f"Broadcast state reset for user {user_id}")
                return
            except Exception as e:
                logger.error(f"Error sending message to user {target_id}: {str(e)}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
                return
        
        # Send broadcast to all users
        from database import Session, User
        session = Session()
        
        try:
            if mode == 'all':
                logger.info(f"Starting broadcast to all users from admin {user_id}")
                users = session.query(User).all()
                success_count = 0
                fail_count = 0
                
                await update.message.reply_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                
                for user in users:
                    try:
                        await context.bot.send_message(
                            chat_id=user.telegram_id,
                            text=f"üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:*\n\n{text}",
                            parse_mode='Markdown'
                        )
                        success_count += 1
                    except Exception as e:
                        logger.warning(f"Failed to send message to user {user.telegram_id}: {e}")
                        fail_count += 1
                
                logger.info(f"Broadcast completed: {success_count} success, {fail_count} failed")
                await update.message.reply_text(
                    f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"–û—à–∏–±–æ–∫: {fail_count}"
                )
            else:
                logger.warning(f"Unknown broadcast mode: {mode}")
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏")
            
            # Reset broadcast state
            context.user_data['broadcast_active'] = False
            context.user_data['broadcast_mode'] = None
            context.user_data['target_user_id'] = None
            context.user_data['current_state'] = None
            logger.info(f"Broadcast state reset for user {user_id}")
            
        finally:
            session.close()
    
    async def boss_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Generate PDF report from boss panel"""
        query = update.callback_query
        await query.answer()
        
        await query.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        
        from database import Session, User, Order
        from pdf_generator import generate_admin_report
        
        session = Session()
        try:
            # Get all data
            all_orders = session.query(Order).all()
            all_users = session.query(User).all()
            
            # Generate PDF
            report_path = generate_admin_report(all_orders, all_users)
            
            # Send PDF file
            with open(report_path, 'rb') as pdf_file:
                await query.message.reply_document(
                    document=pdf_file,
                    filename=f"TieShop_Report_{datetime.now().strftime('%Y%m%d')}.pdf",
                    caption="üìä *–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!*\n\n–í –æ—Ç—á–µ—Ç–µ:\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã",
                    parse_mode='Markdown'
                )
            
            # Clean up
            os.remove(report_path)
            
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        finally:
            session.close()
    
    def run(self):
        """Run the bot"""
        logger.info("Starting bot...")
        # Add error handler
        self.application.add_error_handler(self.error_handler)
        self.application.run_polling()
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle errors"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        try:
            # Notify user about error
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
                )
        except:
            pass
        
        # Notify admins
        for admin_id in ADMIN_IDS:
            try:
                error_text = f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –í –ë–û–¢–ï:\n\n{str(context.error)[:500]}"
                await context.bot.send_message(chat_id=admin_id, text=error_text)
            except:
                pass

if __name__ == '__main__':
    bot = TieShopBot()
    bot.run()
