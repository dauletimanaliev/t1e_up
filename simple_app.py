#!/usr/bin/env python3
"""
Simple version of T1EUP Web Application without SQLAlchemy
For deployment compatibility
"""

from flask import Flask, render_template, request, redirect, url_for, session, jsonify, send_from_directory
import os
import json
from datetime import datetime
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__, static_folder='static', static_url_path='/static')
app.secret_key = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª–µ
DB_FILE = 'simple_db.json'

def load_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(DB_FILE):
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        'users': {},
        'orders': {},
        'ties': [
            {
                'id': 1,
                'name_ru': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–∏–π –≥–∞–ª—Å—Ç—É–∫',
                'name_kz': '–ö–ª–∞—Å—Å–∏–∫–∞–ª—ã“õ –∫”©–∫ –≥–∞–ª—Å—Ç—É–∫',
                'name_en': 'Classic Blue Tie',
                'color_ru': '–°–∏–Ω–∏–π',
                'color_kz': '–ö”©–∫',
                'color_en': 'Blue',
                'description_ru': '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–∞–ª—Å—Ç—É–∫ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
                'description_kz': '–¢–∞–±–∏“ì–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞–Ω –∂–∞—Å–∞–ª“ì–∞–Ω —Å”ô–Ω–¥—ñ –∫–ª–∞—Å—Å–∏–∫–∞–ª—ã“õ –≥–∞–ª—Å—Ç—É–∫',
                'description_en': 'Elegant classic tie made from natural material',
                'price': 15000,
                'image_path': 'TieUp/088eb3ce-53ee-4b2e-9de8-9f0a832537e0.jpg',
                'active': True,
                'material_ru': '100% –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª',
                'material_kz': '100% —Ç–∞–±–∏“ì–∏ –º–∞—Ç–µ—Ä–∏–∞–ª',
                'material_en': '100% natural material'
            }
        ]
    }

def save_db(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_all_active_ties():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–∞–ª—Å—Ç—É–∫–∏"""
    db = load_db()
    return [tie for tie in db['ties'] if tie.get('active', True)]

def create_order(tie_id, recipient_name, recipient_surname, recipient_phone, delivery_address, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    db = load_db()
    ties = {tie['id']: tie for tie in db['ties']}
    
    if tie_id not in ties:
        return None
    
    tie = ties[tie_id]
    order_id = len(db['orders']) + 1
    
    order = {
        'id': order_id,
        'tie_id': tie_id,
        'tie_name': tie['name_ru'],
        'price': tie['price'],
        'recipient_name': recipient_name,
        'recipient_surname': recipient_surname,
        'recipient_phone': recipient_phone,
        'delivery_address': delivery_address,
        'user_id': user_id,
        'status': 'pending',
        'created_at': datetime.now().isoformat()
    }
    
    db['orders'][str(order_id)] = order
    save_db(db)
    return order

def get_or_create_user(user_id, username, first_name, last_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = load_db()
    
    if str(user_id) not in db['users']:
        db['users'][str(user_id)] = {
            'id': user_id,
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
            'created_at': datetime.now().isoformat()
        }
        save_db(db)
    
    return db['users'][str(user_id)]

def get_user_orders(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = load_db()
    return [order for order in db['orders'].values() if order['user_id'] == user_id]

def send_admin_notification(order):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram"""
    bot_token = os.environ.get('BOT_TOKEN')
    admin_id = os.environ.get('ADMIN_ID')
    
    if not bot_token or not admin_id:
        print("BOT_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    message = f"""
üõçÔ∏è *–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order['id']}*

üë§ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ö–£–ü–ê–¢–ï–õ–ï:*
‚Ä¢ –ò–º—è: {order['recipient_name']} {order.get('recipient_surname', '')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order['recipient_phone']}
‚Ä¢ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}

üé© *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {order['tie_name']}
‚Ä¢ –¶–µ–Ω–∞: {order['price']:,.0f} ‚Ç∏
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 —à—Ç

üì¶ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï:*
‚Ä¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order['id']}
‚Ä¢ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {datetime.fromisoformat(order['created_at']).strftime('%d.%m.%Y –≤ %H:%M')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {order['status']}
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: –í–µ–±-—Å–∞–π—Ç T1EUP

üí∞ *–û–ü–õ–ê–¢–ê:*
‚Ä¢ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {order['price']:,.0f} ‚Ç∏
‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: Kaspi
‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: https://pay.kaspi.kz/pay/sl65g7ez

üè¢ *–†–ï–ö–í–ò–ó–ò–¢–´:*
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–ü –ê–£–ï–õ–¨–¢–ê–ô
‚Ä¢ –ê–¥—Ä–µ—Å: –ê–ª–º–∞—Ç—ã, –ú—É—Å—Ç–∞–π –ö–∞—Ä–∏–º–∞ 13–∞, 72

üìû *–ö–û–ù–¢–ê–ö–¢–´:*
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {order['recipient_phone']}
‚Ä¢ –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä

‚è∞ *–í–†–ï–ú–Ø –û–ë–†–ê–ë–û–¢–ö–ò:*
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        'chat_id': admin_id,
        'text': message,
        'parse_mode': 'Markdown'
    }
    
    try:
        response = requests.post(url, data=data)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    ties = get_all_active_ties()
    return render_template('index.html', ties=ties)

@app.route('/tie/<int:tie_id>')
def tie_detail(tie_id):
    db = load_db()
    tie = next((t for t in db['ties'] if t['id'] == tie_id), None)
    if not tie:
        return "–ì–∞–ª—Å—Ç—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return render_template('tie_detail.html', tie=tie)

@app.route('/order/<int:tie_id>')
def order_form(tie_id):
    db = load_db()
    tie = next((t for t in db['ties'] if t['id'] == tie_id), None)
    if not tie:
        return "–ì–∞–ª—Å—Ç—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return render_template('order_form.html', tie=tie)

@app.route('/order/<int:tie_id>', methods=['POST'])
def create_order_route(tie_id):
    user_id = request.cookies.get('user_id')
    if not user_id:
        return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'})
    
    recipient_name = request.form.get('recipient_name')
    recipient_surname = request.form.get('recipient_surname')
    recipient_phone = request.form.get('recipient_phone')
    delivery_address = request.form.get('delivery_address')
    
    if not all([recipient_name, recipient_phone, delivery_address]):
        return jsonify({'success': False, 'error': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'})
    
    order = create_order(tie_id, recipient_name, recipient_surname, recipient_phone, delivery_address, int(user_id))
    
    if order:
        send_admin_notification(order)
        return redirect(url_for('order_success', order_id=order['id']))
    else:
        return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞'})

@app.route('/order/success/<int:order_id>')
def order_success(order_id):
    db = load_db()
    order = db['orders'].get(str(order_id))
    if not order:
        return "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return render_template('order_success.html', order=order)

@app.route('/profile')
def profile():
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('index'))
    
    orders = get_user_orders(int(user_id))
    return render_template('profile.html', orders=orders)

@app.route('/auth/telegram', methods=['POST'])
def auth_telegram():
    data = request.get_json()
    user_id = data.get('id')
    username = data.get('username')
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    
    if not user_id:
        return jsonify({'success': False, 'error': 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'})
    
    user = get_or_create_user(user_id, username, first_name, last_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
    is_admin = str(user_id) in admin_ids
    
    if is_admin:
        session['admin_authenticated'] = True
        session['admin_telegram_id'] = user_id
    
    response = jsonify({
        'success': True,
        'user': user,
        'is_admin': is_admin
    })
    
    response.set_cookie('user_id', str(user_id), max_age=30*24*60*60)  # 30 –¥–Ω–µ–π
    return response

@app.route('/TieUp/<path:filename>')
def tie_images(filename):
    return send_from_directory('TieUp', filename)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/admin')
def admin_catalog():
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('admin_login'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
    if str(user_id) not in admin_ids:
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    db = load_db()
    ties = db['ties']
    return render_template('admin/catalog.html', ties=ties)

@app.route('/admin/login')
def admin_login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    return render_template('admin/login.html')

@app.route('/admin/login', methods=['POST'])
def admin_login_post():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    password = request.form.get('password')
    admin_password = os.environ.get('ADMIN_PASSWORD', 'admin123')
    
    if password == admin_password:
        session['admin_authenticated'] = True
        return redirect(url_for('admin_catalog'))
    else:
        return render_template('admin/login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')

@app.route('/admin/logout')
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    session.pop('admin_authenticated', None)
    session.pop('admin_telegram_id', None)
    return redirect(url_for('index'))

@app.route('/admin/tie/add')
def admin_add_tie():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–ª—Å—Ç—É–∫–∞"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('admin_login'))
    
    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
    if str(user_id) not in admin_ids:
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    return render_template('admin/add_tie.html')

@app.route('/admin/tie/add', methods=['POST'])
def admin_add_tie_post():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–∞–ª—Å—Ç—É–∫–∞"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('admin_login'))
    
    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
    if str(user_id) not in admin_ids:
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∞–ª—Å—Ç—É–∫–∞
    db = load_db()
    new_tie = {
        'id': len(db['ties']) + 1,
        'name_ru': request.form.get('name_ru', ''),
        'name_kz': request.form.get('name_kz', ''),
        'name_en': request.form.get('name_en', ''),
        'color_ru': request.form.get('color_ru', ''),
        'color_kz': request.form.get('color_kz', ''),
        'color_en': request.form.get('color_en', ''),
        'description_ru': request.form.get('description_ru', ''),
        'description_kz': request.form.get('description_kz', ''),
        'description_en': request.form.get('description_en', ''),
        'price': int(request.form.get('price', 0)),
        'image_path': request.form.get('image_path', ''),
        'active': request.form.get('active') == 'on',
        'material_ru': request.form.get('material_ru', '100% –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª'),
        'material_kz': request.form.get('material_kz', '100% —Ç–∞–±–∏“ì–∏ –º–∞—Ç–µ—Ä–∏–∞–ª'),
        'material_en': request.form.get('material_en', '100% natural material')
    }
    
    db['ties'].append(new_tie)
    save_db(db)
    
    return redirect(url_for('admin_catalog'))

@app.route('/admin/tie/<int:tie_id>/edit')
def admin_edit_tie(tie_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–ª—Å—Ç—É–∫–∞"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('admin_login'))
    
    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
    if str(user_id) not in admin_ids:
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    db = load_db()
    tie = next((t for t in db['ties'] if t['id'] == tie_id), None)
    if not tie:
        return "–ì–∞–ª—Å—Ç—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    return render_template('admin/edit_tie.html', tie=tie)

@app.route('/admin/tie/<int:tie_id>/edit', methods=['POST'])
def admin_edit_tie_post(tie_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∞–ª—Å—Ç—É–∫–∞"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('admin_login'))
    
    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
    if str(user_id) not in admin_ids:
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    db = load_db()
    tie = next((t for t in db['ties'] if t['id'] == tie_id), None)
    if not tie:
        return "–ì–∞–ª—Å—Ç—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–∞–ª—Å—Ç—É–∫–∞
    tie['name_ru'] = request.form.get('name_ru', tie['name_ru'])
    tie['name_kz'] = request.form.get('name_kz', tie['name_kz'])
    tie['name_en'] = request.form.get('name_en', tie['name_en'])
    tie['color_ru'] = request.form.get('color_ru', tie['color_ru'])
    tie['color_kz'] = request.form.get('color_kz', tie['color_kz'])
    tie['color_en'] = request.form.get('color_en', tie['color_en'])
    tie['description_ru'] = request.form.get('description_ru', tie['description_ru'])
    tie['description_kz'] = request.form.get('description_kz', tie['description_kz'])
    tie['description_en'] = request.form.get('description_en', tie['description_en'])
    tie['price'] = int(request.form.get('price', tie['price']))
    tie['image_path'] = request.form.get('image_path', tie['image_path'])
    tie['active'] = request.form.get('active') == 'on'
    tie['material_ru'] = request.form.get('material_ru', tie['material_ru'])
    tie['material_kz'] = request.form.get('material_kz', tie['material_kz'])
    tie['material_en'] = request.form.get('material_en', tie['material_en'])
    
    save_db(db)
    return redirect(url_for('admin_catalog'))

@app.route('/admin/tie/<int:tie_id>/toggle-status')
def admin_toggle_tie_status(tie_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–∞–ª—Å—Ç—É–∫–∞ (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('admin_login'))
    
    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
    if str(user_id) not in admin_ids:
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    db = load_db()
    tie = next((t for t in db['ties'] if t['id'] == tie_id), None)
    if not tie:
        return "–ì–∞–ª—Å—Ç—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    tie['active'] = not tie.get('active', True)
    save_db(db)
    
    return redirect(url_for('admin_catalog'))

@app.route('/admin/tie/<int:tie_id>/delete')
def admin_delete_tie(tie_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–∞–ª—Å—Ç—É–∫–∞"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('admin_login'))
    
    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
    if str(user_id) not in admin_ids:
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    db = load_db()
    db['ties'] = [t for t in db['ties'] if t['id'] != tie_id]
    save_db(db)
    
    return redirect(url_for('admin_catalog'))

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Render
application = app

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('DEBUG', 'False').lower() == 'true'
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=debug
    )
